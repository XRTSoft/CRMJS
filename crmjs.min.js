var crmjs = function () { function t(t) { return null === t || void 0 === t } var e = Xrm; return { FORM_TYPE_CREATE: 1, FORM_TYPE_UPDATE: 2, FORM_TYPE_READ_ONLY: 3, FORM_TYPE_DISABLED: 4, FORM_TYPE_BULK_EDIT: 6, FORM_TYPE_READ_OPTIMIZED: 11, isNullOrUndefined: function (t) { return null === t || void 0 === t }, isNullOrUndefinedOrEmptyString: function (e) { var n = t(e); return n ? n : "" === n }, init: function () { }, utils: { openDialog: function (t, e, n) { var r = "/cs/dialog/rundialog.aspx?DialogId=" + t + "&EntityName=" + e + "&ObjectId=" + n; window.open(r) }, openDialogByName: function (t, e, n) { crmjs.webAPI.filter("workflows", "name eq '" + t + "' and parentworkflowid/workflowid eq null and statecode eq 2", "name", function (t) { var r = "/cs/dialog/rundialog.aspx?DialogId=" + t.workflowid + "&EntityName=" + e + "&ObjectId=" + n; window.open(r) }) } }, webAPI: { fixId: function (t) { return t = crmjs.isNullOrUndefined(t) ? "" : t, t = t.replace("{", ""), t = t.replace("}", "") }, getByUrl: function (t, e) { var n = new XMLHttpRequest; n.open("get", t, !0), n.setRequestHeader("OData-MaxVersion", "4.0"), n.setRequestHeader("OData-Version", "4.0"), n.setRequestHeader("Prefer", 'odata.include-annotations="*"'), n.onreadystatechange = function () { 4 == this.readyState && (n.onreadystatechange = null, null !== e && "function" == typeof e && e(JSON.parse(this.responseText))) }, n.send() }, filter: function (t, e, n, r) { var a = "/api/data/v8.2/" + t + "/"; a += "?filter=" + e + "&", a += "$select=" + n, crmjs.webAPI.getByUrl(a, r) }, byId: function (t, e, n, r) { var a = "/api/data/v8.2/" + t + "(" + crmjs.webAPI.fixId(e) + ")"; a += "?$select=" + n, crmjs.webAPI.getByUrl(a, r) } }, attr: { get: function (n) { var r = e.Page.getAttribute(n); if (t(r)) throw "attributes.get - no attribute found with name: " + n; return r }, getControl: function (n) { var r = e.Page.getControl(n); if (t(r)) throw "attributes.getControl - no control found with name: " + n; return r }, getValue: function (t) { var e = crmjs.attr.get(t); return e.getValue() }, getCurrentValue: function (t) { var e = crmjs.attr.getControl(t); return e.getValue() }, setValue: function (t, e) { var n = crmjs.attr.get(t); try { n.setValue(e) } catch (r) { throw "attr.setValue (" + t + ") - Exception: " + r.message } }, setLookupValue: function (t, e, n, r) { var a = crmjs.attr.get(t); try { var o = []; o[0] = {}, o[0].id = e, o[0].name = n, o[0].entityType = r, a.setValue(o) } catch (i) { throw "attr.setLookupValue (" + t + ") - Exception: " + i.message } }, getDisabled: function (t) { var e = crmjs.attr.getControl(t); return e.getDisabled() }, setDisabled: function (t, e) { var n = crmjs.attr.getControl(t); n.setDisabled(e) }, getVisible: function (t) { var e = crmjs.attr.getControl(t); return e.getVisible() }, setVisible: function (t, e) { var n = crmjs.attr.getControl(t); n.setVisible(e) }, setRequired: function (t, e) { var n = crmjs.attr.get(t); n.setRequiredLevel(e ? "required" : "none") }, getLabel: function (t) { var e = crmjs.attr.getControl(t); return e.getLabel() }, setLabel: function (t, e) { var n = crmjs.attr.getControl(t); n.setLabel(e) }, addOnChange: function (t, e, n) { var r = crmjs.attr.get(t).addOnChange(e); n && r.fireOnChange() } }, grids: { refresh: function (t) { var e = crmjs.attr.getControl(t); e.refresh() }, get: function (t) { var e = crmjs.attr.getControl(t); return e.getGrid() }, getEntityName: function (t) { var e = crmjs.attr.getControl(t); return e.getEntityName() }, addOnLoad: function (t, e) { var n = crmjs.attr.getControl(t); n.addOnLoad(e) } }, form: { getLabel: function () { var t = e.Page.ui.formSelector.getCurrentItem(); return null === t ? "" : t.getLabel() }, getEntityId: function () { return e.Page.data.entity.getId() }, getEntityName: function () { return e.Page.data.entity.getEntityName() }, getFormType: function () { return e.Page.ui.getFormType() }, addOnSave: function (t) { e.Page.data.entity.addOnSave(t) }, removeOnSave: function (t) { e.Page.data.entity.removeOnSave(t) }, close: function () { xrmvr.Page.ui.close() }, refreshRibbon: function () { e.Page.ui.refreshRibbon() }, quickForm: { get: function (n) { var r = e.Page.ui.quickForm.get(n); if (t(r)) throw "attributes.get - no quickview form found with name: " + n; return r }, getWhenLoaded: function (t) { var n = e.form.quickForm.get(t); return n.isLoaded() ? n : void window.setTimeout(e.forms.quickForm.get(t), 100) } }, tab: { get: function (n) { var r = e.Page.ui.tabs.get(n); if (t(r)) throw "form.getTab - no tab found with name: " + n; return r }, isCollapsed: function (t) { var e = crmjs.form.tab.get(t); return "collapsed" === e.getDisplayState() }, collapse: function (t) { var e = crmjs.form.tab.get(t); return e.setDisplayState("collapsed") }, expand: function (t) { var e = crmjs.form.tab.get(t); return e.setDisplayState("expanded") }, getLabel: function (t) { var e = crmjs.form.tab.get(t); return e.getLabel() }, setLabel: function (t, e) { var n = crmjs.form.tab.get(t); return n.setLabel(e) }, getVisible: function (t) { var e = crmjs.form.tab.get(t); return e.getVisible() }, setVisible: function (t, e) { var n = crmjs.form.tab.get(t); return n.setVisible(e) } }, section: { get: function (n) { var r = e.Page.ui.tabs.getAll(); if (null === r || r.length < 1) throw "form.getSection - no tabs found on form to use to find section: " + n; for (var a = null, o = 0; o < r.length && (a = r[o].sections.getByName(n), null === a); o++); if (t(a)) throw "form.getSection - no section found with name: " + n; return a }, getLabel: function (t) { var e = crmjs.form.section.get(t); return e.getLabel() }, setLabel: function (t, e) { var n = crmjs.form.section.get(t); return n.setLabel(e) }, getVisible: function (t) { var e = crmjs.form.section.get(t); return e.getVisible() }, setVisible: function (t, e) { var n = crmjs.form.section.get(t); return n.setVisible(e) } } }, navItems: { get: function (n) { var r = e.Page.ui.navigation.items(n); if (t(r)) throw "navItems.get - no nav item found with name: " + n; return r }, setLabel: function (t, e) { var n = crmjs.navItems.get(t); n.setLabel(e) }, getVisible: function (t) { var e = crmjs.navItems.get(t); e.getVisible() }, setVisible: function (t, e) { var n = crmjs.navItems.get(t); n.setVisible(e) } }, events: { refresh: function (t, n, r) { e.Page.data.refresh(save).then(n, r) }, save: function (t, n) { e.Page.data.save().then(t, n) }, saveAndClose: function () { e.Page.data.entity.save("saveandclose") }, saveAndNew: function () { e.Page.data.entity.save("saveandnew") } }, notificatons: { set: function (t, n, r) { e.Page.ui.setFormNotification(t, n, r) }, clear: function (t) { e.Page.ui.clearFormNotification(t) }, fieldSet: function (t, e, n) { var r = crmjs.attr.getControl(t); r.setNotification(e, n) }, fieldClear: function (t, e) { var n = crmjs.attr.getControl(t); n.clearNotification(e) } }, iframe: { getSrc: function (t) { var e = crmjs.attr.getControl(t); return e.getSrc() }, setSrc: function (t, e) { var n = crmjs.attr.getControl(t); return n.setSrc(e) }, get: function () { var t = crmjs.attr.getControl(iFrameName); return t.getObject() } }, debug: { log: function (t) { ("undefined" == typeof console || void 0 === console.log) && (console = {}, console.log = function (t) { alert(t) }), console.log("debug: " + t) } } } }();